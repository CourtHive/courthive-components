{"version":3,"file":"generateMatchUps-b96e6c58.js","sources":["../../src/data/generateMatchUps.js"],"sourcesContent":["import { mocksEngine, tournamentEngine } from \"tods-competition-factory\";\n\nexport function generateMatchUps({\n  matchUpFormat = \"SET5-S:6/TB7\",\n  randomWinningSide = true,\n  qualifyingProfiles,\n  participantsCount,\n  completionGoal,\n  drawSize = 4,\n  eventType,\n  outcomes,\n  drawType,\n} = {}) {\n  const complete =\n    completionGoal < 100\n      ? Math.floor(drawSize * 0.01 * completionGoal)\n      : undefined;\n\n  const venueId = \"venueId\";\n  const venueProfiles = [\n    {\n      venueName: \"Challenge Courts\",\n      venueAbbreviation: \"CC\",\n      startTime: \"08:00\",\n      endTime: \"20:00\",\n      venueId,\n\n      courtNames: [1, 2, 3, 4, 5, 6, 7, 8],\n      courtIds: [\"c1\", \"c2\", \"c3\", \"c4\"],\n      courtsCount: 8,\n    },\n  ];\n\n  const drawProfile = {\n    eventType: eventType === \"DOUBLES\" ? \"DOUBLES\" : \"SINGLES\", // for storybook entry fields: ensure valid value!\n    completionGoal: complete,\n    qualifyingProfiles,\n    participantsCount,\n    seedsCount: 8,\n    matchUpFormat,\n    drawSize,\n    drawType,\n    outcomes,\n  };\n\n  if (drawType === \"AD_HOC\")\n    Object.assign(drawProfile, { drawMatic: true, roundsCount: 3 });\n\n  const result = mocksEngine.generateTournamentRecord({\n    drawProfiles: [drawProfile],\n    completeAllMatchUps: true,\n    randomWinningSide,\n    venueProfiles,\n  });\n\n  const { tournamentRecord } = result;\n\n  const { matchUps: allMatchUps } = tournamentEngine\n    .setState(tournamentRecord)\n    .allTournamentMatchUps();\n  const matchUpIds = allMatchUps.map(({ matchUpId }) => matchUpId);\n  const schedule = {\n    startTime: \"08:00\",\n    endTime: \"10:00\",\n    scheduledTime: \"07:00\",\n    scheduledDate: \"2021-01-01\",\n    courtId: \"c1\",\n    venueId,\n  };\n  tournamentEngine.bulkScheduleMatchUps({ matchUpIds, schedule });\n\n  const { matchUps } = tournamentEngine.allTournamentMatchUps({\n    participantsProfile: { withISO2: true, withIOC: true },\n  });\n\n  return { matchUps };\n}\n"],"names":["generateMatchUps","matchUpFormat","randomWinningSide","qualifyingProfiles","participantsCount","completionGoal","drawSize","eventType","outcomes","drawType","complete","venueId","venueProfiles","drawProfile","result","mocksEngine","tournamentRecord","allMatchUps","tournamentEngine","matchUpIds","matchUpId","schedule","matchUps"],"mappings":"oDAEO,SAASA,EAAiB,CAC/B,cAAAC,EAAgB,eAChB,kBAAAC,EAAoB,GACpB,mBAAAC,EACA,kBAAAC,EACA,eAAAC,EACA,SAAAC,EAAW,EACX,UAAAC,EACA,SAAAC,EACA,SAAAC,CACF,EAAI,GAAI,CACN,MAAMC,EACJL,EAAiB,IACb,KAAK,MAAMC,EAAW,IAAOD,CAAc,EAC3C,OAEAM,EAAU,UACVC,EAAgB,CACpB,CACE,UAAW,mBACX,kBAAmB,KACnB,UAAW,QACX,QAAS,QACT,QAAAD,EAEA,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACnC,SAAU,CAAC,KAAM,KAAM,KAAM,IAAI,EACjC,YAAa,CACd,CACL,EAEQE,EAAc,CAClB,UAAWN,IAAc,UAAY,UAAY,UACjD,eAAgBG,EAChB,mBAAAP,EACA,kBAAAC,EACA,WAAY,EACZ,cAAAH,EACA,SAAAK,EACA,SAAAG,EACA,SAAAD,CACJ,EAEMC,IAAa,UACf,OAAO,OAAOI,EAAa,CAAE,UAAW,GAAM,YAAa,CAAC,CAAE,EAEhE,MAAMC,EAASC,EAAY,yBAAyB,CAClD,aAAc,CAACF,CAAW,EAC1B,oBAAqB,GACrB,kBAAAX,EACA,cAAAU,CACJ,CAAG,EAEK,CAAE,iBAAAI,CAAkB,EAAGF,EAEvB,CAAE,SAAUG,CAAW,EAAKC,EAC/B,SAASF,CAAgB,EACzB,wBACGG,EAAaF,EAAY,IAAI,CAAC,CAAE,UAAAG,CAAS,IAAOA,CAAS,EACzDC,EAAW,CACf,UAAW,QACX,QAAS,QACT,cAAe,QACf,cAAe,aACf,QAAS,KACT,QAAAV,CACJ,EACEO,EAAiB,qBAAqB,CAAE,WAAAC,EAAY,SAAAE,CAAU,CAAA,EAE9D,KAAM,CAAE,SAAAC,CAAQ,EAAKJ,EAAiB,sBAAsB,CAC1D,oBAAqB,CAAE,SAAU,GAAM,QAAS,EAAM,CAC1D,CAAG,EAED,MAAO,CAAE,SAAAI,CAAQ,CACnB"}